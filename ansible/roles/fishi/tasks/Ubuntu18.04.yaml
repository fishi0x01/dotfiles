---
- name: Install apt packages
  apt:
    name: "{{ apt_packages }}"
    force_apt_get: yes
    state: present
    update_cache: yes

################
# libssl-dev fix
################
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=733644
- name: Fix missing opensslconf.h
  file:
    path: "/usr/include/openssl/opensslconf.h"
    src: "../x86_64-linux-gnu/openssl/opensslconf.h"
    state: link

#################
# Wireshark Setup
#################
- name: Install Wireshark
  apt:
    name:
     - "wireshark"
    state: present
    force_apt_get: yes
    update_cache: yes

- name: Add wireshark group
  group:
    name: "wireshark"
    state: present

- name: Add user to Wireshark Group
  user:
    name: "{{ machine_user }}"
    append: yes
    groups: wireshark

############
# VirtualBox
############
- name: Add virtualbox_2016.asc 
  apt_key:
    # https://www.virtualbox.org/download/oracle_vbox_2016.asc
    data: "{{ lookup('file', 'files/asc/oracle_vbox_2016.asc') }}"
    state: present

- name: Add virtualbox.asc 
  apt_key:
    # https://www.virtualbox.org/download/oracle_vbox.asc
    data: "{{ lookup('file', 'files/asc/oracle_vbox.asc') }}"
    state: present

- name: Add virtualbox repo
  apt_repository:
    repo: "deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian bionic contrib"
    state: present

- name: Install virtualbox
  apt:
    name: "virtualbox-6.1"
    update_cache: yes
    force_apt_get: yes
    state: present

#########
# Keybase
#########
# https://keybase.io/docs/server_security/our_code_signing_key
- name: Copy keybase.asc
  copy:
    src: files/asc/keybase.asc
    dest: /tmp/keybase.asc
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    mode: '0644'

- name: Import keybase.asc
  shell:
    "gpg --import /tmp/keybase.asc"

- name: Download keybase.deb
  get_url:
    url: "https://prerelease.keybase.io/keybase_amd64.deb"
    dest: /tmp/keybase_amd64.deb
    mode: '0640'

- name: Download keybase.deb.sig
  get_url:
    url: "https://prerelease.keybase.io/keybase_amd64.deb.sig"
    dest: /tmp/keybase_amd64.deb.sig
    mode: '0440'

- name: Verify keybase signature
  shell:
    "gpg --verify /tmp/keybase_amd64.deb.sig /tmp/keybase_amd64.deb"

- name: Install keybase.deb
  apt:
    deb: /tmp/keybase_amd64.deb
    state: present
    force_apt_get: yes

##############
# Docker Setup
##############
- name: Add docker.asc
  apt_key:
    # https://download.docker.com/linux/ubuntu/gpg
    data: "{{ lookup('file', 'files/asc/docker.asc') }}"
    state: present

- name: Add docker repo
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
    state: present

- name: Install docker-ce
  apt:
    name: "docker-ce"
    update_cache: yes
    force_apt_get: yes
    state: present

- name: Configure docker-ce
  template:
    src: "templates/docker-daemon.json"
    dest: "/etc/docker/daemon.json"
    owner: "root"
    group: "root"
    mode: "644"
  notify: 
    - "restart docker"

#############
# sysctl.conf
#############
- name: Configure inotify limits
  template:
    src: "templates/sysctl.d.inotify.conf"
    dest: "/etc/sysctl.d/10-inotify.conf"
    owner: "root"
    group: "root"
    mode: "644"
  notify: 
    - "reload sysctl"

#################
# Firefox Sandbox
#################
- name: Configure firefox sandbox desktop
  copy:
    src: files/ff-sandbox.desktop
    dest: "/home/{{ machine_user }}/Desktop/ff-sandbox.desktop"
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    mode: "755"

- name: Configure firefox sandbox icon
  copy:
    src: files/ff-sandbox.png
    dest: "/home/{{ machine_user }}/.local/share/icons/ff-sandbox.png"
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    mode: "444"

#########
# SMB
#########
- name: Ensure samba conf dir exists (avoid rpcclient errors)
  file: 
    path: "/etc/samba/"
    state: directory

- name: Ensure samba conf file exists (avoid rpcclient errors)
  file: 
    path: "/etc/samba/smb.conf"
    state: touch

########
# Rust
########
# https://www.rust-lang.org/tools/install
# Script from https://sh.rustup.rs
- name: Install rust
  become: yes
  become_user: "{{ machine_user }}"
  script: "files/rustup-init.sh -y"

- name: Install cargo packages
  become: yes
  become_user: "{{ machine_user }}"
  shell: "cargo install {{ item }}"
  with_items: "{{ cargo_packages }}"

##########
# Ruby RVM
##########
# https://rvm.io/
- name: Import rvm gpg keys
  shell:
    "echo \"{{ lookup('file', item) }}\" | gpg --import"
  with_items:
    - "files/asc/rvm_1.asc"
    - "files/asc/rvm_2.asc"

# Script from https://get.rvm.io
- name: Install rvm
  become: yes
  become_user: "{{ machine_user }}"
  script: "files/get-rvm.sh stable" 

###########
# Alacritty
###########
- name: Get alacritty deb
  get_url:
    url: https://github.com/alacritty/alacritty/releases/download/v0.4.1/Alacritty-v0.4.1-ubuntu_18_04_amd64.deb
    dest: /tmp/alacritty.deb
    checksum: sha256:cb8320d3f5c75349bf6197a6c24a2ee35701d4e06d34515972414f065526557e

- name: Install alacritty
  apt:
    deb: /tmp/alacritty.deb

- name: Set alacritty.desktop
  copy:
    src: files/alacritty.desktop
    dest: "/home/{{ machine_user }}/Desktop/alacritty.desktop"
    owner: "{{ machine_user }}"
    group: "{{ machine_user }}"
    mode: '0755'

# Install fishshell
- name: Add fishshell PPA
  apt_repository:
    repo: ppa:fish-shell/release-3

- name: Install fishshell
  apt:
    name: "fish"
    force_apt_get: yes
    state: present
    update_cache: yes

- name: Set fish as default shell
  user:
    name: "{{ machine_user }}"
    shell: /usr/bin/fish

# Starship
- name: Link starship.toml
  become: yes
  become_user: "{{ machine_user }}"
  file:
    path: "/home/{{ machine_user }}/.config/starship.toml"
    src: "/home/{{ machine_user }}/.starship.toml"
    state: link
